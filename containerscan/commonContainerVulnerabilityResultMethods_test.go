package containerscan

import (
	"reflect"
	"testing"

	"github.com/armosec/armoapi-go/armotypes"
	"github.com/stretchr/testify/assert"
)

func TestGetIsLastScan(t *testing.T) {
	vulnerabilityResult := CommonContainerVulnerabilityResult{
		IsLastScan: 1,
	}

	isLastScan := vulnerabilityResult.GetIsLastScan()

	if isLastScan != 1 {
		t.Errorf("GetIsLastScan failed, expected %d but got %d", 1, isLastScan)
	}
}

func TestGetIsFixed(t *testing.T) {
	vulnerabilityResult := CommonContainerVulnerabilityResult{
		IsFixed: 1,
	}

	isFixed := vulnerabilityResult.GetIsFixed()

	if isFixed != 1 {
		t.Errorf("GetIsFixed failed, expected %d but got %d", 1, isFixed)
	}
}

func TestGetIntroducedInLayer(t *testing.T) {
	result := CommonContainerVulnerabilityResult{IntroducedInLayer: "layer123"}
	if result.GetIntroducedInLayer() != "layer123" {
		t.Errorf("GetIntroducedInLayer() failed, expected %s but got %s", "layer123", result.GetIntroducedInLayer())
	}
}

func TestGetRelevantLinks(t *testing.T) {
	result := CommonContainerVulnerabilityResult{RelevantLinks: []string{"link1", "link2"}}
	if !reflect.DeepEqual(result.GetRelevantLinks(), []string{"link1", "link2"}) {
		t.Errorf("GetRelevantLinks() failed, expected %v but got %v", []string{"link1", "link2"}, result.GetRelevantLinks())
	}
}

func TestSetWLID(t *testing.T) {
	result := CommonContainerVulnerabilityResult{WLID: "wlid123"}
	result.SetWLID("wlid456")
	if result.WLID != "wlid456" {
		t.Errorf("SetWLID() failed, expected %s but got %s", "wlid456", result.WLID)
	}
}

func TestSetContainerScanID(t *testing.T) {
	result := CommonContainerVulnerabilityResult{ContainerScanID: "scan123"}
	result.SetContainerScanID("scan456")
	if result.ContainerScanID != "scan456" {
		t.Errorf("SetContainerScanID() failed, expected %s but got %s", "scan456", result.ContainerScanID)
	}
}

func TestSetTimestamp(t *testing.T) {
	result := CommonContainerVulnerabilityResult{Timestamp: 12345}
	result.SetTimestamp(67890)
	if result.Timestamp != 67890 {
		t.Errorf("SetTimestamp() failed, expected %d but got %d", 67890, result.Timestamp)
	}
}

func TestSetIsLastScan(t *testing.T) {
	result := CommonContainerVulnerabilityResult{IsLastScan: 0}
	result.SetIsLastScan(1)
	if result.IsLastScan != 1 {
		t.Errorf("SetIsLastScan() failed, expected %d but got %d", 1, result.IsLastScan)
	}
}

func TestSetIsFixed(t *testing.T) {
	result := CommonContainerVulnerabilityResult{IsFixed: 0}
	result.SetIsFixed(1)
	if result.IsFixed != 1 {
		t.Errorf("SetIsFixed() failed, expected %d but got %d", 1, result.IsFixed)
	}
}

func TestSetIntroducedInLayer(t *testing.T) {
	result := CommonContainerVulnerabilityResult{IntroducedInLayer: "layer123"}
	result.SetIntroducedInLayer("layer456")
	if result.IntroducedInLayer != "layer456" {
		t.Errorf("SetIntroducedInLayer() failed, expected %s but got %s", "layer456", result.IntroducedInLayer)
	}
}

func TestGetDesignators(t *testing.T) {
	vulnerabilityResult := CommonContainerVulnerabilityResult{
		Designators: armotypes.PortalDesignator{
			Attributes: map[string]string{
				"designator1": "value1",
			},
			WLID: "wlid123",
		},
	}

	designators := vulnerabilityResult.GetDesignators()

	assert.Equal(t, "wlid123", designators.WLID)
	assert.Equal(t, "value1", designators.Attributes["designator1"])
}

func TestGetContext(t *testing.T) {
	vulnerabilityResult := CommonContainerVulnerabilityResult{
		Context: []armotypes.ArmoContext{{
			Attribute: "context1",
		}},
	}

	context := vulnerabilityResult.GetContext()

	assert.Equal(t, "context1", context[0].Attribute)
}

func TestGetLayersNested(t *testing.T) {
	layer1 := ESLayer{
		LayerHash:       "hash1",
		ParentLayerHash: "hash2",
		LayerInfo: &LayerInfo{
			CreatedBy:  "createdBy1",
			LayerOrder: 1,
		},
	}
	layer2 := ESLayer{
		LayerHash:       "hash3",
		ParentLayerHash: "hash4",
		LayerInfo: &LayerInfo{
			CreatedBy:  "createdBy2",
			LayerOrder: 2,
		},
	}
	c := CommonContainerVulnerabilityResult{
		LayersNested: []ESLayer{layer1, layer2},
	}
	layers := c.GetLayersNested()
	assert.Equal(t, 2, len(layers))
	assert.Equal(t, "createdBy1", layers[0].CreatedBy)
	assert.Equal(t, "createdBy2", layers[1].CreatedBy)

	assert.Equal(t, "hash1", layers[0].LayerHash)
	assert.Equal(t, "hash3", layers[1].LayerHash)
	assert.Equal(t, "hash2", layers[0].ParentLayerHash)
	assert.Equal(t, "hash4", layers[1].ParentLayerHash)

}

func TestGetRelatedExceptions(t *testing.T) {
	vulnerabilityResult := CommonContainerVulnerabilityResult{
		RelatedExceptions: []armotypes.VulnerabilityExceptionPolicy{{
			PolicyType: "exception1",
		}},
	}

	relatedExceptions := vulnerabilityResult.GetRelatedExceptions()

	assert.Equal(t, "exception1", relatedExceptions[0].PolicyType)
}

func TestVulnerability(t *testing.T) {
	vulnerability := Vulnerability{
		Severity: "severity1",
	}
	assert.Equal(t, "severity1", vulnerability.Severity)
}

func TestCommonContainerVulnerabilityResult_GetRelevantLabel(t *testing.T) {
	vulnerabilityResult := CommonContainerVulnerabilityResult{
		RelevantLabel: "label1",
	}
	assert.Equal(t, RelevantLabel("label1"), vulnerabilityResult.GetRelevantLabel())
}

func TestCommonContainerVulnerabilityResult_SetRelevantLabel(t *testing.T) {
	vulnerabilityResult := CommonContainerVulnerabilityResult{
		RelevantLabel: "label1",
	}
	vulnerabilityResult.SetRelevantLabel("label2")
	assert.Equal(t, RelevantLabel("label2"), vulnerabilityResult.RelevantLabel)
}
