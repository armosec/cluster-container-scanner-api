package containerscan

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetName(t *testing.T) {
	v := &Vulnerability{Name: "test-vulnerability"}
	if v.GetName() != "test-vulnerability" {
		t.Errorf("Expected GetName to return %s, but got %s", "test-vulnerability", v.GetName())
	}
}

func TestGetImageID(t *testing.T) {
	v := &Vulnerability{ImageID: "test-image-id"}
	if v.GetImageID() != "test-image-id" {
		t.Errorf("Expected GetImageID to return %s, but got %s", "test-image-id", v.GetImageID())
	}
}

func TestGetImageTag(t *testing.T) {
	v := &Vulnerability{ImageTag: "test-image-tag"}
	if v.GetImageTag() != "test-image-tag" {
		t.Errorf("Expected GetImageTag to return %s, but got %s", "test-image-tag", v.GetImageTag())
	}
}

func TestGetRelatedPackageName(t *testing.T) {
	v := &Vulnerability{RelatedPackageName: "test-package-name"}
	if v.GetRelatedPackageName() != "test-package-name" {
		t.Errorf("Expected GetRelatedPackageName to return %s, but got %s", "test-package-name", v.GetRelatedPackageName())
	}
}

func TestGetPackageVersion(t *testing.T) {
	v := &Vulnerability{PackageVersion: "test-package-version"}
	if v.GetPackageVersion() != "test-package-version" {
		t.Errorf("Expected GetPackageVersion to return %s, but got %s", "test-package-version", v.GetPackageVersion())
	}
}

func TestGetLink(t *testing.T) {
	v := &Vulnerability{Link: "test-link"}
	if v.GetLink() != "test-link" {
		t.Errorf("Expected GetLink to return %s, but got %s", "test-link", v.GetLink())
	}
}

func TestGetDescription(t *testing.T) {
	v := &Vulnerability{Description: "test-description"}
	if v.GetDescription() != "test-description" {
		t.Errorf("Expected GetDescription to return %s, but got %s", "test-description", v.GetDescription())
	}
}

func TestGetSeverity(t *testing.T) {
	v := &Vulnerability{Severity: "test-severity"}
	if v.GetSeverity() != "test-severity" {
		t.Errorf("Expected GetSeverity to return %s, but got %s", "test-severity", v.GetSeverity())
	}
}

func TestGetIsRelevant(t *testing.T) {
	isRelevant := true
	v := &Vulnerability{
		IsRelevant: &isRelevant,
	}

	result := v.GetIsRelevant()

	if *result != true {
		t.Errorf("Expected IsRelevant to be true, but got %v", *result)
	}
}

func TestGetUrgentCount(t *testing.T) {
	v := &Vulnerability{
		UrgentCount: 5,
	}

	result := v.GetUrgentCount()

	if result != 5 {
		t.Errorf("Expected UrgentCount to be 5, but got %v", result)
	}
}

func TestGetNeglectedCount(t *testing.T) {
	v := &Vulnerability{
		NeglectedCount: 2,
	}

	result := v.GetNeglectedCount()

	if result != 2 {
		t.Errorf("Expected NeglectedCount to be 2, but got %v", result)
	}
}

func TestGetHealthStatus(t *testing.T) {
	v := &Vulnerability{
		HealthStatus: "Critical",
	}

	result := v.GetHealthStatus()

	if result != "Critical" {
		t.Errorf("Expected HealthStatus to be 'Critical', but got %v", result)
	}
}

func TestSetName(t *testing.T) {
	v := &Vulnerability{}
	name := "Test Name"
	v.SetName(name)
	if v.Name != name {
		t.Errorf("SetName() failed: expected %v, got %v", name, v.Name)
	}
}

func TestSetImageID(t *testing.T) {
	v := &Vulnerability{}
	imageID := "image-123"
	v.SetImageID(imageID)
	if v.ImageID != imageID {
		t.Errorf("SetImageID() failed: expected %v, got %v", imageID, v.ImageID)
	}
}

func TestSetImageTag(t *testing.T) {
	v := &Vulnerability{}
	imageTag := "latest"
	v.SetImageTag(imageTag)
	if v.ImageTag != imageTag {
		t.Errorf("SetImageTag() failed: expected %v, got %v", imageTag, v.ImageTag)
	}
}

func TestSetRelatedPackageName(t *testing.T) {
	v := &Vulnerability{}
	relatedPackageName := "Test Package"
	v.SetRelatedPackageName(relatedPackageName)
	if v.RelatedPackageName != relatedPackageName {
		t.Errorf("SetRelatedPackageName() failed: expected %v, got %v", relatedPackageName, v.RelatedPackageName)
	}
}

func TestSetPackageVersion(t *testing.T) {
	v := &Vulnerability{}
	packageVersion := "1.2.3"
	v.SetPackageVersion(packageVersion)
	if v.PackageVersion != packageVersion {
		t.Errorf("SetPackageVersion() failed: expected %v, got %v", packageVersion, v.PackageVersion)
	}
}

func TestSetLink(t *testing.T) {
	v := &Vulnerability{}
	link := "https://example.com/vuln"
	v.SetLink(link)
	if v.Link != link {
		t.Errorf("SetLink() failed: expected %v, got %v", link, v.Link)
	}
}

func TestSetDescription(t *testing.T) {
	v := &Vulnerability{}
	description := "Test Description"
	v.SetDescription(description)
	if v.Description != description {
		t.Errorf("SetDescription() failed: expected %v, got %v", description, v.Description)
	}
}

func TestSetSeverity(t *testing.T) {
	v := &Vulnerability{}
	severity := "Critical"
	v.SetSeverity(severity)
	if v.Severity != severity {
		t.Errorf("SetSeverity() failed: expected %v, got %v", severity, v.Severity)
	}
}

func TestSetSeverityScore(t *testing.T) {
	v := &Vulnerability{}
	severityScore := 10
	v.SetSeverityScore(severityScore)
	if v.SeverityScore != severityScore {
		t.Errorf("SetSeverityScore() failed: expected %v, got %v", severityScore, v.SeverityScore)
	}
}

func TestGetFixes(t *testing.T) {
	v := &Vulnerability{}
	v.Fixes = []FixedIn{
		{
			Name:    "fix1",
			Version: "1.0.0",
			ImgTag:  "latest",
		},
	}
	assert.Equal(t, v.GetFixes(), v.Fixes)

}

func TestScanResultReportV1_GetHasRelevancyData(t *testing.T) {
	reportWithRelevancy := ScanResultReportV1{HasRelevancyData: true}
	if !reportWithRelevancy.GetHasRelevancyData() {
		t.Error("Expected GetHasRelevancyData() to return true for a ScanResultReportV1 with relevancy data, but it returned false")
	}

	reportWithoutRelevancy := ScanResultReportV1{HasRelevancyData: false}
	if reportWithoutRelevancy.GetHasRelevancyData() {
		t.Error("Expected GetHasRelevancyData() to return false for a ScanResultReportV1 without relevancy data, but it returned true")
	}
}

func TestScanResultReportV1_SetContainerScanID(t *testing.T) {
	report := ScanResultReportV1{}

	report.SetContainerScanID("12345")
	if report.GetContainerScanID() != "12345" {
		t.Error("Expected SetContainerScanID() to set the container scan ID of a ScanResultReportV1, but it was not set")
	}
}

func TestScanResultReportV1_SetTimestamp(t *testing.T) {
	report := ScanResultReportV1{Timestamp: 0}

	report.SetTimestamp(12345)
	if report.GetTimestamp() != 12345 {
		t.Errorf("Expected SetTimestamp() to set the timestamp of a ScanResultReportV1 to 12345, but it was set to %d", report.GetTimestamp())
	}
}
